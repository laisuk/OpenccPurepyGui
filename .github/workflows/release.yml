name: Release OpenccPurepyGui

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_suffix: linux-x64
            archive_ext: tar.gz
            archive_cmd: tar -czf OpenccPurepyGui-${{ github.ref_name }}-linux-x64.tar.gz -C mainwindow.dist .
          - os: windows-latest
            artifact_suffix: win-x64
            archive_ext: zip
            # Use PowerShell's Compress-Archive for Windows
            archive_cmd: powershell -Command "Compress-Archive -Path mainwindow.dist\\* -DestinationPath OpenccPurepyGui-${{ github.ref_name }}-win-x64.zip"
          - os: macos-latest
            artifact_suffix: macos
            archive_ext: zip
            # Zip the .app bundle; name is consistent with Nuitka output-filename
            archive_cmd: |
              cd mainwindow.dist
              zip -r ../OpenccPurepyGui-${{ github.ref_name }}-macos.zip OpenccPurepyGui.app
              cd ..

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install build dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements.txt

      - name: Linux prerequisites
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y patchelf libgl1 libx11-xcb1 libxkbcommon-x11-0 libxcb-cursor0 libnss3

      - name: Show tool versions
        run: |
          python --version
          python -m nuitka --version || true
          patchelf --version || true

      - name: Build (Nuitka)
        shell: bash
        run: |
          python -m nuitka \
            --standalone \
            --enable-plugin=pyside6 \
            --include-package=opencc_purepy \
            --include-data-dir=opencc_purepy/dicts=opencc_purepy/dicts \
            --output-filename=OpenccPurepyGui \
            --lto=yes \
            --assume-yes-for-downloads \
            mainwindow.py

      # ----- Optional macOS codesign/notarize (guarded by secrets) -----
      - name: Import signing certificate (macOS)
        if: runner.os == 'macOS' && env.MAC_CERT_BASE64 != '' && env.MAC_CERT_PASSWORD != '' && env.MAC_CODESIGN_ID != ''
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          MAC_CODESIGN_ID: ${{ secrets.MAC_CODESIGN_ID }} # e.g. "Developer ID Application: Your Name (TEAMID)"
        run: |
          echo "$MAC_CERT_BASE64" | base64 --decode > signing.p12
          security create-keychain -p temp build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p temp build.keychain
          security import signing.p12 -k build.keychain -P "$MAC_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k temp build.keychain
          /usr/bin/codesign --force --options runtime --deep \
            --sign "$MAC_CODESIGN_ID" "mainwindow.dist/OpenccPurepyGui.app"
          /usr/bin/codesign --verify --deep --strict "mainwindow.dist/OpenccPurepyGui.app"

      - name: Notarize (macOS)
        if: runner.os == 'macOS' && env.MAC_CERT_BASE64 != '' && env.MAC_CERT_PASSWORD != '' && env.MAC_CODESIGN_ID != '' && env.APPLE_ID != '' && env.APPLE_TEAM_ID != '' && env.APPLE_APP_SPECIFIC_PASSWORD != ''
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}                         # your Apple ID email
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}               # e.g. ABCDE12345
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          # Create the zip for notarization
          cd mainwindow.dist
          /usr/bin/zip -r ../OpenccPurepyGui-notarize.zip OpenccPurepyGui.app
          cd ..
          # Submit to Apple Notary Service
          xcrun notarytool submit OpenccPurepyGui-notarize.zip \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --wait
          # Staple ticket
          xcrun stapler staple "mainwindow.dist/OpenccPurepyGui.app"

      # Package artifacts
      - name: Package
        shell: bash
        run: ${{ matrix.archive_cmd }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: OpenccPurepyGui-${{ github.ref_name }}-${{ matrix.artifact_suffix }}
          path: |
            *.${{ matrix.archive_ext }}
            OpenccPurepyGui-*.zip
          if-no-files-found: warn

  release:
    name: Create GitHub Release
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List files
        run: |
          echo "Artifacts downloaded to ./dist"
          find dist -type f -maxdepth 2

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: OpenccPurepyGui ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/**/*
